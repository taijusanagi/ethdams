/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  IHydraS2Verifier,
  IHydraS2VerifierInterface,
} from "../../../../../@sismo-core/sismo-connect-solidity/contracts/verifiers/IHydraS2Verifier";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "accountsTreeValueFromProof",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "expectedAccountsTreeValue",
        type: "uint256",
      },
    ],
    name: "AccountsTreeValueMismatch",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "claimTypeFromProof",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "expectedClaimType",
        type: "uint256",
      },
    ],
    name: "ClaimTypeMismatch",
    type: "error",
  },
  {
    inputs: [],
    name: "ClaimValueMismatch",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "expectedX",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "expectedY",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "inputX",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "inputY",
        type: "bytes32",
      },
    ],
    name: "CommitmentMapperPubKeyMismatch",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "destinationFromProof",
        type: "address",
      },
      {
        internalType: "address",
        name: "expectedDestination",
        type: "address",
      },
    ],
    name: "DestinationMismatch",
    type: "error",
  },
  {
    inputs: [],
    name: "DestinationVerificationNotEnabled",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "extraDataFromProof",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "expectedExtraData",
        type: "uint256",
      },
    ],
    name: "InvalidExtraData",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidProof",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "version",
        type: "bytes32",
      },
    ],
    name: "InvalidVersion",
    type: "error",
  },
  {
    inputs: [],
    name: "OnlyOneAuthAndOneClaimIsSupported",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "inputRoot",
        type: "uint256",
      },
    ],
    name: "RegistryRootNotAvailable",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "requestIdentifierFromProof",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "expectedRequestIdentifier",
        type: "uint256",
      },
    ],
    name: "RequestIdentifierMismatch",
    type: "error",
  },
  {
    inputs: [],
    name: "SourceVerificationNotEnabled",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "userIdFromProof",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "expectedUserId",
        type: "uint256",
      },
    ],
    name: "UserIdMismatch",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "vaultNamespaceFromProof",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "expectedVaultNamespace",
        type: "uint256",
      },
    ],
    name: "VaultNamespaceMismatch",
    type: "error",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea26469706673582212200168ad8fb203664190eb35f4fdaffdf96eec93ee832fe0d442662e5e7485737c64736f6c63430008130033";

type IHydraS2VerifierConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: IHydraS2VerifierConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class IHydraS2Verifier__factory extends ContractFactory {
  constructor(...args: IHydraS2VerifierConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<IHydraS2Verifier> {
    return super.deploy(overrides || {}) as Promise<IHydraS2Verifier>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): IHydraS2Verifier {
    return super.attach(address) as IHydraS2Verifier;
  }
  override connect(signer: Signer): IHydraS2Verifier__factory {
    return super.connect(signer) as IHydraS2Verifier__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): IHydraS2VerifierInterface {
    return new utils.Interface(_abi) as IHydraS2VerifierInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IHydraS2Verifier {
    return new Contract(address, _abi, signerOrProvider) as IHydraS2Verifier;
  }
}
