/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export type AuthStruct = {
  authType: PromiseOrValue<BigNumberish>;
  isAnon: PromiseOrValue<boolean>;
  isSelectableByUser: PromiseOrValue<boolean>;
  userId: PromiseOrValue<BigNumberish>;
  extraData: PromiseOrValue<BytesLike>;
};

export type AuthStructOutput = [number, boolean, boolean, BigNumber, string] & {
  authType: number;
  isAnon: boolean;
  isSelectableByUser: boolean;
  userId: BigNumber;
  extraData: string;
};

export type ClaimStruct = {
  claimType: PromiseOrValue<BigNumberish>;
  groupId: PromiseOrValue<BytesLike>;
  groupTimestamp: PromiseOrValue<BytesLike>;
  isSelectableByUser: PromiseOrValue<boolean>;
  value: PromiseOrValue<BigNumberish>;
  extraData: PromiseOrValue<BytesLike>;
};

export type ClaimStructOutput = [
  number,
  string,
  string,
  boolean,
  BigNumber,
  string
] & {
  claimType: number;
  groupId: string;
  groupTimestamp: string;
  isSelectableByUser: boolean;
  value: BigNumber;
  extraData: string;
};

export type SismoConnectProofStruct = {
  auths: AuthStruct[];
  claims: ClaimStruct[];
  provingScheme: PromiseOrValue<BytesLike>;
  proofData: PromiseOrValue<BytesLike>;
  extraData: PromiseOrValue<BytesLike>;
};

export type SismoConnectProofStructOutput = [
  AuthStructOutput[],
  ClaimStructOutput[],
  string,
  string,
  string
] & {
  auths: AuthStructOutput[];
  claims: ClaimStructOutput[];
  provingScheme: string;
  proofData: string;
  extraData: string;
};

export type SismoConnectResponseStruct = {
  appId: PromiseOrValue<BytesLike>;
  namespace: PromiseOrValue<BytesLike>;
  version: PromiseOrValue<BytesLike>;
  signedMessage: PromiseOrValue<BytesLike>;
  proofs: SismoConnectProofStruct[];
};

export type SismoConnectResponseStructOutput = [
  string,
  string,
  string,
  string,
  SismoConnectProofStructOutput[]
] & {
  appId: string;
  namespace: string;
  version: string;
  signedMessage: string;
  proofs: SismoConnectProofStructOutput[];
};

export type AuthRequestStruct = {
  authType: PromiseOrValue<BigNumberish>;
  userId: PromiseOrValue<BigNumberish>;
  isAnon: PromiseOrValue<boolean>;
  isOptional: PromiseOrValue<boolean>;
  isSelectableByUser: PromiseOrValue<boolean>;
  extraData: PromiseOrValue<BytesLike>;
};

export type AuthRequestStructOutput = [
  number,
  BigNumber,
  boolean,
  boolean,
  boolean,
  string
] & {
  authType: number;
  userId: BigNumber;
  isAnon: boolean;
  isOptional: boolean;
  isSelectableByUser: boolean;
  extraData: string;
};

export type ClaimRequestStruct = {
  claimType: PromiseOrValue<BigNumberish>;
  groupId: PromiseOrValue<BytesLike>;
  groupTimestamp: PromiseOrValue<BytesLike>;
  value: PromiseOrValue<BigNumberish>;
  isOptional: PromiseOrValue<boolean>;
  isSelectableByUser: PromiseOrValue<boolean>;
  extraData: PromiseOrValue<BytesLike>;
};

export type ClaimRequestStructOutput = [
  number,
  string,
  string,
  BigNumber,
  boolean,
  boolean,
  string
] & {
  claimType: number;
  groupId: string;
  groupTimestamp: string;
  value: BigNumber;
  isOptional: boolean;
  isSelectableByUser: boolean;
  extraData: string;
};

export type SignatureRequestStruct = {
  message: PromiseOrValue<BytesLike>;
  isSelectableByUser: PromiseOrValue<boolean>;
  extraData: PromiseOrValue<BytesLike>;
};

export type SignatureRequestStructOutput = [string, boolean, string] & {
  message: string;
  isSelectableByUser: boolean;
  extraData: string;
};

export type SismoConnectRequestStruct = {
  appId: PromiseOrValue<BytesLike>;
  namespace: PromiseOrValue<BytesLike>;
  auths: AuthRequestStruct[];
  claims: ClaimRequestStruct[];
  signature: SignatureRequestStruct;
};

export type SismoConnectRequestStructOutput = [
  string,
  string,
  AuthRequestStructOutput[],
  ClaimRequestStructOutput[],
  SignatureRequestStructOutput
] & {
  appId: string;
  namespace: string;
  auths: AuthRequestStructOutput[];
  claims: ClaimRequestStructOutput[];
  signature: SignatureRequestStructOutput;
};

export type VerifiedAuthStruct = {
  authType: PromiseOrValue<BigNumberish>;
  isAnon: PromiseOrValue<boolean>;
  userId: PromiseOrValue<BigNumberish>;
  extraData: PromiseOrValue<BytesLike>;
  proofData: PromiseOrValue<BytesLike>;
};

export type VerifiedAuthStructOutput = [
  number,
  boolean,
  BigNumber,
  string,
  string
] & {
  authType: number;
  isAnon: boolean;
  userId: BigNumber;
  extraData: string;
  proofData: string;
};

export type VerifiedClaimStruct = {
  claimType: PromiseOrValue<BigNumberish>;
  groupId: PromiseOrValue<BytesLike>;
  groupTimestamp: PromiseOrValue<BytesLike>;
  value: PromiseOrValue<BigNumberish>;
  extraData: PromiseOrValue<BytesLike>;
  proofId: PromiseOrValue<BigNumberish>;
  proofData: PromiseOrValue<BytesLike>;
};

export type VerifiedClaimStructOutput = [
  number,
  string,
  string,
  BigNumber,
  string,
  BigNumber,
  string
] & {
  claimType: number;
  groupId: string;
  groupTimestamp: string;
  value: BigNumber;
  extraData: string;
  proofId: BigNumber;
  proofData: string;
};

export type SismoConnectVerifiedResultStruct = {
  appId: PromiseOrValue<BytesLike>;
  namespace: PromiseOrValue<BytesLike>;
  version: PromiseOrValue<BytesLike>;
  auths: VerifiedAuthStruct[];
  claims: VerifiedClaimStruct[];
  signedMessage: PromiseOrValue<BytesLike>;
};

export type SismoConnectVerifiedResultStructOutput = [
  string,
  string,
  string,
  VerifiedAuthStructOutput[],
  VerifiedClaimStructOutput[],
  string
] & {
  appId: string;
  namespace: string;
  version: string;
  auths: VerifiedAuthStructOutput[];
  claims: VerifiedClaimStructOutput[];
  signedMessage: string;
};

export interface ISismoConnectVerifierInterface extends utils.Interface {
  functions: {
    "SISMO_CONNECT_VERSION()": FunctionFragment;
    "verify((bytes16,bytes16,bytes32,bytes,((uint8,bool,bool,uint256,bytes)[],(uint8,bytes16,bytes16,bool,uint256,bytes)[],bytes32,bytes,bytes)[]),(bytes16,bytes16,(uint8,uint256,bool,bool,bool,bytes)[],(uint8,bytes16,bytes16,uint256,bool,bool,bytes)[],(bytes,bool,bytes)))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "SISMO_CONNECT_VERSION" | "verify"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "SISMO_CONNECT_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "verify",
    values: [SismoConnectResponseStruct, SismoConnectRequestStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "SISMO_CONNECT_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;

  events: {
    "VerifierSet(bytes32,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "VerifierSet"): EventFragment;
}

export interface VerifierSetEventObject {
  arg0: string;
  arg1: string;
}
export type VerifierSetEvent = TypedEvent<
  [string, string],
  VerifierSetEventObject
>;

export type VerifierSetEventFilter = TypedEventFilter<VerifierSetEvent>;

export interface ISismoConnectVerifier extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ISismoConnectVerifierInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    SISMO_CONNECT_VERSION(overrides?: CallOverrides): Promise<[string]>;

    verify(
      response: SismoConnectResponseStruct,
      request: SismoConnectRequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  SISMO_CONNECT_VERSION(overrides?: CallOverrides): Promise<string>;

  verify(
    response: SismoConnectResponseStruct,
    request: SismoConnectRequestStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    SISMO_CONNECT_VERSION(overrides?: CallOverrides): Promise<string>;

    verify(
      response: SismoConnectResponseStruct,
      request: SismoConnectRequestStruct,
      overrides?: CallOverrides
    ): Promise<SismoConnectVerifiedResultStructOutput>;
  };

  filters: {
    "VerifierSet(bytes32,address)"(
      arg0?: null,
      arg1?: null
    ): VerifierSetEventFilter;
    VerifierSet(arg0?: null, arg1?: null): VerifierSetEventFilter;
  };

  estimateGas: {
    SISMO_CONNECT_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    verify(
      response: SismoConnectResponseStruct,
      request: SismoConnectRequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    SISMO_CONNECT_VERSION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verify(
      response: SismoConnectResponseStruct,
      request: SismoConnectRequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
