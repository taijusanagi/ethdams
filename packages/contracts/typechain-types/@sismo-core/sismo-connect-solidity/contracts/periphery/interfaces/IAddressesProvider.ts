/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../common";

export interface IAddressesProviderInterface extends utils.Interface {
  functions: {
    "get(string)": FunctionFragment;
    "get(bytes32)": FunctionFragment;
    "getAll()": FunctionFragment;
    "getBatch(bytes32[])": FunctionFragment;
    "getBatch(string[])": FunctionFragment;
    "set(address,string)": FunctionFragment;
    "setBatch(address[],string[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "get(string)"
      | "get(bytes32)"
      | "getAll"
      | "getBatch(bytes32[])"
      | "getBatch(string[])"
      | "set"
      | "setBatch"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "get(string)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "get(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "getAll", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getBatch(bytes32[])",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getBatch(string[])",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "set",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBatch",
    values: [PromiseOrValue<string>[], PromiseOrValue<string>[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "get(string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBatch(bytes32[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBatch(string[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "set", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setBatch", data: BytesLike): Result;

  events: {};
}

export interface IAddressesProvider extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IAddressesProviderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    "get(string)"(
      contractName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "get(bytes32)"(
      contractNameHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getAll(overrides?: CallOverrides): Promise<[string[], string[], string[]]>;

    "getBatch(bytes32[])"(
      contractNamesHash: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    "getBatch(string[])"(
      contractNames: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    set(
      contractAddress: PromiseOrValue<string>,
      contractName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBatch(
      contractAddresses: PromiseOrValue<string>[],
      contractNames: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  "get(string)"(
    contractName: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  "get(bytes32)"(
    contractNameHash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getAll(overrides?: CallOverrides): Promise<[string[], string[], string[]]>;

  "getBatch(bytes32[])"(
    contractNamesHash: PromiseOrValue<BytesLike>[],
    overrides?: CallOverrides
  ): Promise<string[]>;

  "getBatch(string[])"(
    contractNames: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<string[]>;

  set(
    contractAddress: PromiseOrValue<string>,
    contractName: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBatch(
    contractAddresses: PromiseOrValue<string>[],
    contractNames: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    "get(string)"(
      contractName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    "get(bytes32)"(
      contractNameHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getAll(overrides?: CallOverrides): Promise<[string[], string[], string[]]>;

    "getBatch(bytes32[])"(
      contractNamesHash: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    "getBatch(string[])"(
      contractNames: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    set(
      contractAddress: PromiseOrValue<string>,
      contractName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBatch(
      contractAddresses: PromiseOrValue<string>[],
      contractNames: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    "get(string)"(
      contractName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "get(bytes32)"(
      contractNameHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAll(overrides?: CallOverrides): Promise<BigNumber>;

    "getBatch(bytes32[])"(
      contractNamesHash: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBatch(string[])"(
      contractNames: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    set(
      contractAddress: PromiseOrValue<string>,
      contractName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBatch(
      contractAddresses: PromiseOrValue<string>[],
      contractNames: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    "get(string)"(
      contractName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "get(bytes32)"(
      contractNameHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAll(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getBatch(bytes32[])"(
      contractNamesHash: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBatch(string[])"(
      contractNames: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    set(
      contractAddress: PromiseOrValue<string>,
      contractName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBatch(
      contractAddresses: PromiseOrValue<string>[],
      contractNames: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
