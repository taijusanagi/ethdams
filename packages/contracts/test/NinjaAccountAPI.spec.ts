import { ethers } from "hardhat";
import { expect } from "chai";
import { EntryPoint__factory } from "@account-abstraction/contracts";
import { NinjaAccountAPI } from "../../app/src/lib/account-abstraction/NinjaAccountAPI";
import deployments from "../deployments.json";
import { appId } from "../lib/sismo";

describe("NinjaAccountAPI", () => {
  const { entryPointAddress } = deployments;

  // fixture
  const userId = "0x20fd5ff9c98c4ae40d735e04a785cfcd748008d04e3e8f0a742160e79acc1e4d";
  const groupIds = ["0x1cde61966decb8600dfd0749bd371f12"];
  const salt = "0xcfee7c08a98f4b565d124c7e4e28acc52e1bc780e3887db0a02a7d2d5bc66728";
  // update to valid prood
  const responseBytes =
    "0x000000000000000000000000000000000000000000000000000000000000002049c751f1595e8b3016096a7df01d2a9600000000000000000000000000000000b8e2054f8a912367e38a22ce773328ff000000000000000000000000000000007369736d6f2d636f6e6e6563742d76310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000208221aa5ae5cef8b75f88f917d3a6ee1cf48d98b5c7be913fb925ef04c87200530000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001a068796472612d73322e310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000004a00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000120fd5ff9c98c4ae40d735e04a785cfcd748008d04e3e8f0a742160e79acc1e4d00000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002c0227bb1978d9df0ca9e2cabaa2149f25a78572aeb1ce0635795dcae0eee38008e15bc2f140c0d783d4446e611c5ebfa724d75444e3fe86f83b6a10178412890b22c1299f1ba49ff2ae732994a19375d7bf025cfffad9e9c393c4efae3485a271c12ffee1b95c7b9bb52a5a6528d00e12c2f4a876cad631e8aa7607632334b010f11d7312d82e687fad8861963ac4d505250eff512a0e07b7de193d14e29b63e022f67473e7f31ad65a9dab68a228040a7644ad3f6a58621286c4c1027c0abf2440f0cac4e4b26d073f3f990107f91c861ee1810ea62e9850f76fc3b74da5517940af3206a753c0ec4361e8ac6f3aba957ae1b1a6dc8e87cadd45aaf662e26b9a00000000000000000000000000000000000000000000000000000000000000000028de7364f0abb3e04e208b48fb07e3160f55ba85deb868e1f08e835be4ae1e707f6c5612eb579788478789deccb06cf0eb168e457eea490af754922939ebdb920706798455f90ed993f8dac8075fc1538738a25f0c928da905c0dffd81869fa00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020fd5ff9c98c4ae40d735e04a785cfcd748008d04e3e8f0a742160e79acc1e4d28df6018afa5e59738975c607d5e93b9e7fc5564edaa1bf7655e8693ea14282c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

  const fixture = async () => {
    const [signer] = await ethers.getSigners();

    const SismoVerifier = await ethers.getContractFactory("SismoVerifier");
    const sismoVerifier = await SismoVerifier.deploy(appId);

    const entryPoint = EntryPoint__factory.connect(entryPointAddress, signer);
    const NinjaAccountFactory = await ethers.getContractFactory("NinjaAccountFactory");
    const ninjaAccountFactory = await NinjaAccountFactory.deploy(entryPoint.address, sismoVerifier.address);

    await ninjaAccountFactory.deployed();
    const ninjaAccountAPI = new NinjaAccountAPI({
      entryPointAddress: entryPointAddress,
      factoryAddress: ninjaAccountFactory.address,
      verifierAddress: sismoVerifier.address,
      userId,
      groupIds,
      salt,
      provider: ethers.provider,
    });
    return { signer, entryPoint, ninjaAccountAPI, sismoVerifier };
  };

  it("getAccountAddress", async function () {
    const { ninjaAccountAPI } = await fixture();
    expect(await ninjaAccountAPI.getAccountAddress()).not.eq(ethers.constants.AddressZero);
  });

  it("CreateUnsignedUserOperation", async function () {
    const { signer, entryPoint, ninjaAccountAPI } = await fixture();
    const accountAddress = await ninjaAccountAPI.getAccountAddress();
    await signer.sendTransaction({ to: accountAddress, value: ethers.utils.parseEther("0.01") });
    const userOp = await ninjaAccountAPI.createUnsignedUserOp({
      data: "0x",
      target: ethers.constants.AddressZero,
    });
    userOp.signature = responseBytes;
    // this needs to be run with valid prood
    // await entryPoint.handleOps(
    //   [{ ...userOp, callGasLimit: 100000, preVerificationGas: 100000, verificationGasLimit: 1000000 }],
    //   signer.address
    // );
  });
});
